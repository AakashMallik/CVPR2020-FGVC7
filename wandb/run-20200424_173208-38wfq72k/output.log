[38;2;0;191;255m[ Setting up project on W&B ](B[m
[ Dataset : fgvc7 < train / 0 > ]
[ Transformer :  320x320 | Policy  ]
[ Dataset : fgvc7 < val / 0 > ]
[ Transformer :  320x320 | RGB-Norm  ]
[ Model : Efficientnet B4 ]
[ Tuning type :  fine-tuning  ]
[ Prediction type :  classification  ]
[ Optimiser : AdamW ]
[ Scheduler : CosineAnnealingLR ]
Progress:   0%|                                                                                                                                            | [ETA:?] [Batch:0/46 Epoch:0/50][ Loss: Arcface Loss ]
Progress:   0%|                                                                                                                                            | [ETA:?] [Batch:1/46 Epoch:1/50]
Traceback (most recent call last):
  File "./main.py", line 40, in <module>
    train( config, device )
  File "/home/humble_d/Projects/data_science/CVPR2020-FGVC7/train.py", line 132, in train
    output = model.forward(input)
  File "/home/humble_d/Projects/data_science/CVPR2020-FGVC7/models/efficientnet.py", line 210, in forward
    x = self.extract_features(inputs)
  File "/home/humble_d/Projects/data_science/CVPR2020-FGVC7/models/efficientnet.py", line 199, in extract_features
    x = block(x, drop_connect_rate=drop_connect_rate)
  File "/home/humble_d/.local/lib/python3.7/site-packages/torch/nn/modules/module.py", line 532, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/humble_d/Projects/data_science/CVPR2020-FGVC7/models/efficientnet.py", line 87, in forward
    x = self._swish(self._bn1(self._depthwise_conv(x)))
  File "/home/humble_d/.local/lib/python3.7/site-packages/torch/nn/modules/module.py", line 532, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/humble_d/.local/lib/python3.7/site-packages/torch/nn/modules/batchnorm.py", line 107, in forward
    exponential_average_factor, self.eps)
  File "/home/humble_d/.local/lib/python3.7/site-packages/torch/nn/functional.py", line 1670, in batch_norm
    training, momentum, eps, torch.backends.cudnn.enabled
RuntimeError: CUDA out of memory. Tried to allocate 150.00 MiB (GPU 0; 7.79 GiB total capacity; 6.48 GiB already allocated; 93.94 MiB free; 6.57 GiB reserved in total by PyTorch)
